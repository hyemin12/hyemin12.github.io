### 1. 느린 서버 시작 속도 개선하기

vite는 먼저 애플리케이션의 모듈을 종속성과 소스 코드의 두 가지 범주로 나누어 개발 서버 시작 시간을 개선합니다.

#### ■ 종속성(Dependencies)

대부분 개발 중에 자주 변경되지 않는 일반 자바스크립트입니다. 일부 큰 종속성(수백 개의 모듈이 있는 구성 요소 라이브러리)도 처리하는 데 비용이 많이 듭니다. 종속성은 다양한 모듈 형식(ESM 또는 CommonJS)로 제공될 수 있습니다.

Vite는 esbuild를 사용하여 종속성을 사전 번들로 제공합니다. esbuild는 Go로 작성되어있으며 자바스크립트 기반 번들러보다 10~100배 빠르게 종속성을 사전 번들링합니다.

#### ■ 소스 코드 (Source Code)

변환이 필요한 자바스크립트가 아닌 경우가 많으며(JSX,CSS, VUE/Svelte 구성요소) 매우 자주 편집됩니다. 또한 모든 소스 코드를 동시에 로드할 필요가 없습니다.

Vite는 기본 ESM을 통해 소스 코드를 제공합니다. 이것은 본질적으로 브라우저가 번들러 작업의 일부를 인계 받게 하는 것 입니다. vite는 브라우저가 요청할 때 요청에 따라 소스 코드를 변환하고 제공하기만 하면 됩니다. 조건부 동적 가져오기 뒤에 있는 코드는 현재 화면에서 실제로 사용되는 경우에만 처리됩니다.

◆ ESM

```js
import a from "./a";
export default { a, b: 2 };
```

◆ commonJS

```js
const a = require("./a");
moudule.exports = { a, b: 2 };
```

### 2. 느린 서버 업데이트 속도 개선하기

번들러 기반 빌드 설정에서 파일을 편집할 때 명백한 이유로 전체 번들하는 것은 비효율적입니다. 업데이트 속도는 앱 크기에 따라 선형적으로 저하됩니다.

일부 번들러에서 개발 서버는 파일이 변경될 때 모듈 그래프의 일부만 무효화하면 되지만 전체 번들을 다시 구성하고 웹 페이지를 다시 로드해야 하도록 메모리에서 번들링을 실행합니다. 번들을 재구성하는 데 비용이 많이 들 수 있으며 페이지를 다시 로드하면 애플리케이션의 현재 상태가 손상됩니다. 이것이 일부 번들러가 핫 모듈 교체(HMR)를 지원하는 이유입니다. 페이지의 나머지 부분에 영향을 주지 않고 모듈 자체를 Hot Module Replacement를 할 수 있습니다. 이것은 DX(developer experience)를 크게 향상시킵니다. 그러나 실제로 HMR 업데이트 속도도 응용 프로그램의 크기가 증가함에 따라 크게 저하되는 것을 발견했습니다.
